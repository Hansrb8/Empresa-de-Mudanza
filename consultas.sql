/*¿Cuáles son los empleados con mayor experiencia en la empresa?*/
SELECT * FROM EMPLEADO ORDER BY EMPLEADO_FECHA_INGRESO

/*¿Qué tipos de mudanzas son los más solicitados ciudad y la cantidad y el avaluó de estos mismos por parte de los clientes?*/
SELECT ARTICULO_MUDANZA.ARTMUD_DESCRIPCION,origen.ciudad_nombre as origen,destino.ciudad_nombre as destino,ARTICULO_MUDANZA.ARTMUD_CANTIDAD,
ARTICULO_MUDANZA.ARTMUD_AVALUO
FROM ARTICULO_MUDANZA
INNER JOIN MUDANZA ON MUDANZA.MUDANZA_ID = ARTICULO_MUDANZA.MUDANZA_ID
INNER JOIN SOLICITUD ON SOLICITUD.SOLICITUD_ID = MUDANZA.SOLICITUD_ID
INNER JOIN CIUDAD DESTINO ON DESTINO.CIUDAD_ID = SOLICITUD.CIUDAD_ID_DESTINO
INNER JOIN CIUDAD ORIGEN ON ORIGEN.CIUDAD_ID = SOLICITUD.CIUDAD_ID_ORIGEN
ORDER BY ARTICULO_MUDANZA.ARTMUD_DESCRIPCION DESC

/*¿Qué cantidad de personas trabajan en la empresa principal (matriz) y en las demás sucursales?*/
SELECT COUNT(sucursal.sucursal_id) AS CANTIDAD_EMPLEADOS,SUCURSAL.SUCURSAL_TIPO FROM SUCURSAL
INNER JOIN EMPLEADO ON EMPLEADO.SUCURSAL_ID = SUCURSAL.SUCURSAL_ID
GROUP BY SUCURSAL.SUCURSAL_ID

/*Histórico de tipos de incidencias ocurridas en traslados. En columna 1 debe aparecer año, en columna dos tipos de incidente, y en columna 3 el número de veces*/
select extract(year from MUDANZA.MUDANZA_FECHA_FIN) AS ANIO,INCIDENCIA.INCIDENCIA_DESCRIPCION,COUNT(INCIDENCIA.INCIDENCIA_DESCRIPCION) AS CANTIDAD from MUDANZA_INCIDENCIA
INNER JOIN MUDANZA ON MUDANZA_INCIDENCIA.MUDANZA_ID = MUDANZA.MUDANZA_ID
INNER JOIN INCIDENCIA ON MUDANZA_INCIDENCIA.INCIDENCIA_ID = INCIDENCIA.INCIDENCIA_ID
GROUP BY ANIO, INCIDENCIA.INCIDENCIA_DESCRIPCION

/*Un trigger que actualice el número de veces que una persona ha pedido el servicio de la mudanza.*/

CREATE OR REPLACE FUNCTION TG_AUMENTARMUDANZACLIENTE() RETURNS TRIGGER AS
$TG_AUMENTARMUDANZACLIENTE$
BEGIN
	UPDATE CLIENTE
	SET CLIENTE_NUMERO_MUDANZAS = CLIENTE_NUMERO_MUDANZAS+1
	WHERE CLIENTE_CEDULA = NEW.CLIENTE_CEDULA;
	RETURN NEW;
END
$TG_AUMENTARMUDANZACLIENTE$
LANGUAGE PLPGSQL;

CREATE TRIGGER TG_AUMENTARMUDANZACLIENTE BEFORE INSERT OR UPDATE
ON SOLICITUD FOR EACH ROW
EXECUTE PROCEDURE TG_AUMENTARMUDANZACLIENTE();


Insert Into Solicitud Values(DEFAULT,1,6,'1739205748',null,'Miraflores Y Cordova','9 De Octubre Y Escobedo','2018-05-03');

/*Un cursor que muestre los datos del cliente con los artículos o bienes que se han trasladado de un lugar a otro*/

do $$
declare
	registro Record;
	Cur_articulos Cursor for select CLIENTE.CLIENTE_NOMBRES,CLIENTE.CLIENTE_APELLIDOS,CLIENTE.CLIENTE_CEDULA,ARTICULO_MUDANZA.ARTMUD_DESCRIPCION from MUDANZA
					inner join SOLICITUD on SOLICITUD.MUDANZA_ID = MUDANZA.MUDANZA_ID
					INNER JOIN CLIENTE ON CLIENTE.CLIENTE_CEDULA = SOLICITUD.CLIENTE_CEDULA
					INNER JOIN ARTICULO_MUDANZA ON ARTICULO_MUDANZA.MUDANZA_ID = MUDANZA.MUDANZA_ID;
	begin
	for registro in Cur_articulos loop
	Raise notice 'NOMBRES: %,APELLIDOS:  %,CEDULA:  %,ARTICULO:  %',registro.CLIENTE_NOMBRES, registro.CLIENTE_APELLIDOS,REGISTRO.CLIENTE_CEDULA,REGISTRO.ARTMUD_DESCRIPCION;
	end loop;
end $$
language 'plpgsql';

/*Un procedimiento almacenado que para que un asesor que se le ingrese devuelva todos los artículos prestados por la empresa en su trabajo*/
create or replace function obtener_prestados(cedula_empleado varchar)
RETURNS TABLE (EMPLEADO_CEDULA varchar,
  VEHICULO_PLACA varchar,
  VEHICULO_MARCA varchar)
as $BODY$
begin
	RETURN QUERY
    SELECT EMPLEADO_ASIGNADO.EMPLEADO_CEDULA, VEHICULO.VEHICULO_PLACA,VEHICULO.VEHICULO_MARCA
	FROM EMPLEADO_ASIGNADO
	INNER JOIN VEHICULO_MUDANZA ON VEHICULO_MUDANZA.VEHICULO_MUDANZA_ID = EMPLEADO_ASIGNADO.VEHICULO_MUDANZA_ID
	INNER JOIN VEHICULO ON VEHICULO.VEHICULO_ID = VEHICULO_MUDANZA.VEHICULO_ID
	WHERE EMPLEADO_ASIGNADO.EMPLEADO_CEDULA = cedula_empleado;
end
$BODY$ language plpgsql;

SELECT * FROM obtener_prestados('1311021337');

/*Consulta Reporte*/
select extract(year from MUDANZA.MUDANZA_FECHA_FIN) AS ANIO , SUM(MUDANZA.MUDANZA_COSTO)
from MUDANZA
GROUP BY ANIO